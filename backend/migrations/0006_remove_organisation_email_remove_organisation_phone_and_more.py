# Generated by Django 5.0.7 on 2024-07-13 11:27

import django.db.models.deletion
import phonenumber_field.modelfields
from django.db import migrations, models
from phonenumber_field.phonenumber import PhoneNumber
from phonenumbers.phonenumberutil import NumberParseException
from django.core.exceptions import ValidationError

def migrateFieldsFwd(apps, schema_editor):
    Organisation = apps.get_model("backend", "Organisation")
    OrgEmail = apps.get_model("backend", 'OrgEmail')
    OrgPhone = apps.get_model("backend", 'OrgPhone')
    OrgWebsite = apps.get_model("backend", 'OrgWebsite')
    for org in Organisation.objects.all():
        emails = org.email
        try:
            for email in emails.split():
                orgEmail = OrgEmail.objects.create(label = "E-Mail", email = email, organisation = org)
                orgEmail.full_clean()
                orgEmail.save()
        except ValidationError as e:
            print(f"Could not migrate e-mail \"{emails}\" of organistaion {org.name}, {org.id}")

        phones = org.phone
        try:
            if phones:
                for phone in phones.split(";"):
                    try:
                        phoneNumber = PhoneNumber.from_string(phone)
                    except:
                        phoneNumber = PhoneNumber.from_string(phone, region="DE")
                        print(f"Assumed German number prefix on phone number {phone} of organisation {org.name}, {org.id}, {org.state.country.name}")
                    orgPhone = OrgPhone.objects.create(label = "Telefon", phone = phoneNumber, organisation = org)
                    orgPhone.full_clean()
                    orgPhone.save()
        except (ValidationError, NumberParseException) as e:
            print(f"Could not migrate phonenumber \"{phone}\" of organistaion {org.name}, {org.id}")

        websites = org.website
        try:
            for website in websites.split():
                orgWebsite = OrgWebsite.objects.create(label = "Website", url = website, organisation = org)
                orgWebsite.full_clean()
                orgWebsite.save()
        except ValidationError as e:
            print(f"Could not migrate website \"{websites}\" of organistaion {org.name}, {org.id}")

def migrateFieldsRev(apps, schema_editor):
    Organisation = apps.get_model("backend", "Organisation")
    OrgEmail = apps.get_model("backend", 'OrgEmail')
    OrgPhone = apps.get_model("backend", 'OrgPhone')
    OrgWebsite = apps.get_model("backend", 'OrgWebsite')
    for org in Organisation.objects.all():
        email = OrgEmail.objects.filter(organisation = org).first()
        phone = OrgPhone.objects.filter(organisation = org).first()
        website = OrgWebsite.objects.filter(organisation = org).first()
        org.email = email.email if email else ""
        org.phone = phone.phone.as_international if phone else ""
        org.website = website.url if website else ""
        org.save()


class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0005_country_alter_organisation_country'),
    ]

    operations = [
        migrations.CreateModel(
            name='OrgEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(default='E-Mail', max_length=30)),
                ('email', models.EmailField(max_length=254)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.organisation')),
            ],
            options={
                'verbose_name': 'e-mail',
            },
        ),
        migrations.CreateModel(
            name='OrgPhone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(default='Telefon', max_length=30)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.organisation')),
            ],
            options={
                'verbose_name': 'phone',
            },
        ),
        migrations.CreateModel(
            name='OrgWebsite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(default='Website', max_length=30)),
                ('url', models.URLField()),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.organisation')),
            ],
            options={
                'verbose_name': 'website',
            },
        ),
        migrations.RunPython(
            migrateFieldsFwd,
            migrateFieldsRev
        ),
        migrations.RemoveField(
            model_name='organisation',
            name='email',
        ),
        migrations.RemoveField(
            model_name='organisation',
            name='phone',
        ),
        migrations.RemoveField(
            model_name='organisation',
            name='website',
        ),
    ]
