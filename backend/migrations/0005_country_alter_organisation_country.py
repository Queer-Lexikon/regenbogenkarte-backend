# Generated by Django 4.2.11 on 2024-06-28 16:56

from django.db import migrations, models
import django.db.models.deletion

def createStates(apps, schema_editor):
    # Create country objects for each named country. Assign that country object as country_tmp to the org.
    Country = apps.get_model("backend", "Country")
    State = apps.get_model("backend", "State")
    Organisation = apps.get_model("backend", "Organisation")
    for org in Organisation.objects.all():
        country, created = Country.objects.get_or_create(name=org.country)
        state, created = State.objects.get_or_create(name=org.state, country=country)
        org.state_tmp = state
        org.save()

def deleteStates(apps, schema_editor):
    # Reverse migration
    # Set country to the (now old) country objects name
    Country = apps.get_model("backend", "Country")
    State = apps.get_model("backend", "State")
    Organisation = apps.get_model("backend", "Organisation")
    for org in Organisation.objects.all():
        org.state = org.state_tmp.name
        org.country = org.state_tmp.country.name
        org.save()

class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0004_alter_organisation_identities'),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.country')),
            ],
            options={'ordering': ['country', 'name']},
        ),
        # Create a new Foreign Key field to hold the state in the future, nullable for now
        migrations.AddField(
            model_name='organisation',
            name='state_tmp',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='backend.state', null=True),
        ),
        # Set old country and state field to nullable - this ist necessary for reverse migration.
        migrations.AlterField(
            model_name='organisation',
            name='country',
            field=models.CharField(max_length = 50, null=True),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='state',
            field=models.CharField(max_length = 50, null=True),
        ),
        # Migrate Data from old to new field
        migrations.RunPython(
            createStates, 
            deleteStates
        ),
        # Delete old fields
        migrations.RemoveField(
            model_name='organisation',
            name='country',
        ),
        migrations.RemoveField(
            model_name='organisation',
            name='state',
        ),
        # Rename new field to final name
        migrations.RenameField(
            model_name='organisation',
            old_name='state_tmp',
            new_name='state',
        ),
        # Remove nullable attribute from field
        migrations.AlterField(
            model_name='organisation',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='backend.state'),
        ),
  ]
